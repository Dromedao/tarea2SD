// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: archivo.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AssignService_AssignDrone_FullMethodName = "/dronesystem.AssignService/AssignDrone"
)

// AssignServiceClient is the client API for AssignService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Servicio 1: Expuesto por 'asignacion.go' para ser llamado por el 'cliente.go'
type AssignServiceClient interface {
	AssignDrone(ctx context.Context, in *EmergencyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type assignServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAssignServiceClient(cc grpc.ClientConnInterface) AssignServiceClient {
	return &assignServiceClient{cc}
}

func (c *assignServiceClient) AssignDrone(ctx context.Context, in *EmergencyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AssignService_AssignDrone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AssignServiceServer is the server API for AssignService service.
// All implementations must embed UnimplementedAssignServiceServer
// for forward compatibility.
//
// Servicio 1: Expuesto por 'asignacion.go' para ser llamado por el 'cliente.go'
type AssignServiceServer interface {
	AssignDrone(context.Context, *EmergencyRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedAssignServiceServer()
}

// UnimplementedAssignServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAssignServiceServer struct{}

func (UnimplementedAssignServiceServer) AssignDrone(context.Context, *EmergencyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignDrone not implemented")
}
func (UnimplementedAssignServiceServer) mustEmbedUnimplementedAssignServiceServer() {}
func (UnimplementedAssignServiceServer) testEmbeddedByValue()                       {}

// UnsafeAssignServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AssignServiceServer will
// result in compilation errors.
type UnsafeAssignServiceServer interface {
	mustEmbedUnimplementedAssignServiceServer()
}

func RegisterAssignServiceServer(s grpc.ServiceRegistrar, srv AssignServiceServer) {
	// If the following call pancis, it indicates UnimplementedAssignServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AssignService_ServiceDesc, srv)
}

func _AssignService_AssignDrone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmergencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssignServiceServer).AssignDrone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssignService_AssignDrone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssignServiceServer).AssignDrone(ctx, req.(*EmergencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AssignService_ServiceDesc is the grpc.ServiceDesc for AssignService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AssignService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dronesystem.AssignService",
	HandlerType: (*AssignServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AssignDrone",
			Handler:    _AssignService_AssignDrone_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "archivo.proto",
}

const (
	DroneService_AtenderEmergencia_FullMethodName = "/dronesystem.DroneService/AtenderEmergencia"
)

// DroneServiceClient is the client API for DroneService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Servicio 2: Expuesto por 'drones.go' para ser llamado por 'asignacion.go'
type DroneServiceClient interface {
	AtenderEmergencia(ctx context.Context, in *DroneEmergencyRequest, opts ...grpc.CallOption) (*DroneEmergencyResponse, error)
}

type droneServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDroneServiceClient(cc grpc.ClientConnInterface) DroneServiceClient {
	return &droneServiceClient{cc}
}

func (c *droneServiceClient) AtenderEmergencia(ctx context.Context, in *DroneEmergencyRequest, opts ...grpc.CallOption) (*DroneEmergencyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DroneEmergencyResponse)
	err := c.cc.Invoke(ctx, DroneService_AtenderEmergencia_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DroneServiceServer is the server API for DroneService service.
// All implementations must embed UnimplementedDroneServiceServer
// for forward compatibility.
//
// Servicio 2: Expuesto por 'drones.go' para ser llamado por 'asignacion.go'
type DroneServiceServer interface {
	AtenderEmergencia(context.Context, *DroneEmergencyRequest) (*DroneEmergencyResponse, error)
	mustEmbedUnimplementedDroneServiceServer()
}

// UnimplementedDroneServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDroneServiceServer struct{}

func (UnimplementedDroneServiceServer) AtenderEmergencia(context.Context, *DroneEmergencyRequest) (*DroneEmergencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AtenderEmergencia not implemented")
}
func (UnimplementedDroneServiceServer) mustEmbedUnimplementedDroneServiceServer() {}
func (UnimplementedDroneServiceServer) testEmbeddedByValue()                      {}

// UnsafeDroneServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DroneServiceServer will
// result in compilation errors.
type UnsafeDroneServiceServer interface {
	mustEmbedUnimplementedDroneServiceServer()
}

func RegisterDroneServiceServer(s grpc.ServiceRegistrar, srv DroneServiceServer) {
	// If the following call pancis, it indicates UnimplementedDroneServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DroneService_ServiceDesc, srv)
}

func _DroneService_AtenderEmergencia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DroneEmergencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DroneServiceServer).AtenderEmergencia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DroneService_AtenderEmergencia_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DroneServiceServer).AtenderEmergencia(ctx, req.(*DroneEmergencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DroneService_ServiceDesc is the grpc.ServiceDesc for DroneService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DroneService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dronesystem.DroneService",
	HandlerType: (*DroneServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AtenderEmergencia",
			Handler:    _DroneService_AtenderEmergencia_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "archivo.proto",
}

const (
	MonitoringService_StreamUpdates_FullMethodName = "/dronesystem.MonitoringService/StreamUpdates"
)

// MonitoringServiceClient is the client API for MonitoringService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Servicio 3: Expuesto por 'monitoreo.go' para ser llamado por el 'cliente.go'
type MonitoringServiceClient interface {
	StreamUpdates(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[UpdateResponse], error)
}

type monitoringServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMonitoringServiceClient(cc grpc.ClientConnInterface) MonitoringServiceClient {
	return &monitoringServiceClient{cc}
}

func (c *monitoringServiceClient) StreamUpdates(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[UpdateResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MonitoringService_ServiceDesc.Streams[0], MonitoringService_StreamUpdates_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[emptypb.Empty, UpdateResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MonitoringService_StreamUpdatesClient = grpc.ServerStreamingClient[UpdateResponse]

// MonitoringServiceServer is the server API for MonitoringService service.
// All implementations must embed UnimplementedMonitoringServiceServer
// for forward compatibility.
//
// Servicio 3: Expuesto por 'monitoreo.go' para ser llamado por el 'cliente.go'
type MonitoringServiceServer interface {
	StreamUpdates(*emptypb.Empty, grpc.ServerStreamingServer[UpdateResponse]) error
	mustEmbedUnimplementedMonitoringServiceServer()
}

// UnimplementedMonitoringServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMonitoringServiceServer struct{}

func (UnimplementedMonitoringServiceServer) StreamUpdates(*emptypb.Empty, grpc.ServerStreamingServer[UpdateResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamUpdates not implemented")
}
func (UnimplementedMonitoringServiceServer) mustEmbedUnimplementedMonitoringServiceServer() {}
func (UnimplementedMonitoringServiceServer) testEmbeddedByValue()                           {}

// UnsafeMonitoringServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MonitoringServiceServer will
// result in compilation errors.
type UnsafeMonitoringServiceServer interface {
	mustEmbedUnimplementedMonitoringServiceServer()
}

func RegisterMonitoringServiceServer(s grpc.ServiceRegistrar, srv MonitoringServiceServer) {
	// If the following call pancis, it indicates UnimplementedMonitoringServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MonitoringService_ServiceDesc, srv)
}

func _MonitoringService_StreamUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MonitoringServiceServer).StreamUpdates(m, &grpc.GenericServerStream[emptypb.Empty, UpdateResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MonitoringService_StreamUpdatesServer = grpc.ServerStreamingServer[UpdateResponse]

// MonitoringService_ServiceDesc is the grpc.ServiceDesc for MonitoringService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MonitoringService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dronesystem.MonitoringService",
	HandlerType: (*MonitoringServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamUpdates",
			Handler:       _MonitoringService_StreamUpdates_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "archivo.proto",
}
